// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace DidacticalEnigma.Mem.Client.MemApi
{
    using Models;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DidacticalEnigmaMem.
    /// </summary>
    public static partial class DidacticalEnigmaMemExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object AddCategories(this IDidacticalEnigmaMem operations, string projectName = default(string), AddCategoriesParams body = default(AddCategoriesParams))
            {
                return operations.AddCategoriesAsync(projectName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddCategoriesAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), AddCategoriesParams body = default(AddCategoriesParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCategoriesWithHttpMessagesAsync(projectName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='categoryId'>
            /// </param>
            public static object DeleteCategory(this IDidacticalEnigmaMem operations, string projectName = default(string), System.Guid? categoryId = default(System.Guid?))
            {
                return operations.DeleteCategoryAsync(projectName, categoryId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='categoryId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCategoryAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), System.Guid? categoryId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCategoryWithHttpMessagesAsync(projectName, categoryId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            public static QueryCategoriesResult GetCategories(this IDidacticalEnigmaMem operations, string projectName = default(string))
            {
                return operations.GetCategoriesAsync(projectName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryCategoriesResult> GetCategoriesAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoriesWithHttpMessagesAsync(projectName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='contentTypeOverride'>
            /// </param>
            /// <param name='correlationId'>
            /// </param>
            /// <param name='content'>
            /// </param>
            /// <param name='text'>
            /// </param>
            public static object AddContext(this IDidacticalEnigmaMem operations, string id = default(string), string projectName = default(string), string contentTypeOverride = default(string), string correlationId = default(string), Stream content = default(Stream), string text = default(string))
            {
                return operations.AddContextAsync(id, projectName, contentTypeOverride, correlationId, content, text).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='contentTypeOverride'>
            /// </param>
            /// <param name='correlationId'>
            /// </param>
            /// <param name='content'>
            /// </param>
            /// <param name='text'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddContextAsync(this IDidacticalEnigmaMem operations, string id = default(string), string projectName = default(string), string contentTypeOverride = default(string), string correlationId = default(string), Stream content = default(Stream), string text = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddContextWithHttpMessagesAsync(id, projectName, contentTypeOverride, correlationId, content, text, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='correlationId'>
            /// </param>
            public static QueryContextsResult GetContexts(this IDidacticalEnigmaMem operations, System.Guid? id = default(System.Guid?), string projectId = default(string), string correlationId = default(string))
            {
                return operations.GetContextsAsync(id, projectId, correlationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='projectId'>
            /// </param>
            /// <param name='correlationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryContextsResult> GetContextsAsync(this IDidacticalEnigmaMem operations, System.Guid? id = default(System.Guid?), string projectId = default(string), string correlationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContextsWithHttpMessagesAsync(id, projectId, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='projectName'>
            /// </param>
            public static object DeleteContext(this IDidacticalEnigmaMem operations, System.Guid? id = default(System.Guid?), string projectName = default(string))
            {
                return operations.DeleteContextAsync(id, projectName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteContextAsync(this IDidacticalEnigmaMem operations, System.Guid? id = default(System.Guid?), string projectName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteContextWithHttpMessagesAsync(id, projectName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='ifModifiedSinceOverride'>
            /// </param>
            public static void GetContextData(this IDidacticalEnigmaMem operations, System.Guid? id = default(System.Guid?), System.DateTime? ifModifiedSinceOverride = default(System.DateTime?))
            {
                operations.GetContextDataAsync(id, ifModifiedSinceOverride).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='ifModifiedSinceOverride'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetContextDataAsync(this IDidacticalEnigmaMem operations, System.Guid? id = default(System.Guid?), System.DateTime? ifModifiedSinceOverride = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetContextDataWithHttpMessagesAsync(id, ifModifiedSinceOverride, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object AcceptInvitation(this IDidacticalEnigmaMem operations, AcceptInvitationParams body = default(AcceptInvitationParams))
            {
                return operations.AcceptInvitationAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AcceptInvitationAsync(this IDidacticalEnigmaMem operations, AcceptInvitationParams body = default(AcceptInvitationParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AcceptInvitationWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object RejectInvitation(this IDidacticalEnigmaMem operations, RejectInvitationParams body = default(RejectInvitationParams))
            {
                return operations.RejectInvitationAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RejectInvitationAsync(this IDidacticalEnigmaMem operations, RejectInvitationParams body = default(RejectInvitationParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RejectInvitationWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CancelInvitation(this IDidacticalEnigmaMem operations, CancelInvitationParams body = default(CancelInvitationParams))
            {
                return operations.CancelInvitationAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CancelInvitationAsync(this IDidacticalEnigmaMem operations, CancelInvitationParams body = default(CancelInvitationParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelInvitationWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object SendInvitation(this IDidacticalEnigmaMem operations, string projectName = default(string), SendInvitationParams body = default(SendInvitationParams))
            {
                return operations.SendInvitationAsync(projectName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendInvitationAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), SendInvitationParams body = default(SendInvitationParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendInvitationWithHttpMessagesAsync(projectName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static QueryInvitationsResult QueryInvitations(this IDidacticalEnigmaMem operations)
            {
                return operations.QueryInvitationsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryInvitationsResult> QueryInvitationsAsync(this IDidacticalEnigmaMem operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryInvitationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='contributorName'>
            /// </param>
            public static object RemoveContributor(this IDidacticalEnigmaMem operations, string projectName = default(string), string contributorName = default(string))
            {
                return operations.RemoveContributorAsync(projectName, contributorName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='contributorName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RemoveContributorAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), string contributorName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveContributorWithHttpMessagesAsync(projectName, contributorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='publicallyReadable'>
            /// </param>
            public static object AddProject(this IDidacticalEnigmaMem operations, string projectName = default(string), bool? publicallyReadable = default(bool?))
            {
                return operations.AddProjectAsync(projectName, publicallyReadable).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='publicallyReadable'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddProjectAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), bool? publicallyReadable = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddProjectWithHttpMessagesAsync(projectName, publicallyReadable, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            public static object DeleteProject(this IDidacticalEnigmaMem operations, string projectName = default(string))
            {
                return operations.DeleteProjectAsync(projectName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteProjectAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteProjectWithHttpMessagesAsync(projectName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static QueryProjectsResult ListProjects(this IDidacticalEnigmaMem operations)
            {
                return operations.ListProjectsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryProjectsResult> ListProjectsAsync(this IDidacticalEnigmaMem operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProjectsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static AddTranslationsResult AddTranslations(this IDidacticalEnigmaMem operations, string projectName = default(string), AddTranslationsParams body = default(AddTranslationsParams))
            {
                return operations.AddTranslationsAsync(projectName, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddTranslationsResult> AddTranslationsAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), AddTranslationsParams body = default(AddTranslationsParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTranslationsWithHttpMessagesAsync(projectName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query for translations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// The name of the project
            /// </param>
            /// <param name='correlationId'>
            /// The prefix of the correlation id
            /// </param>
            /// <param name='query'>
            /// Search query
            /// </param>
            /// <param name='category'>
            /// Translation category
            /// </param>
            /// <param name='paginationToken'>
            /// A pagination token that was returned from the previous query with the same
            /// set of parameters
            /// </param>
            /// <param name='limit'>
            /// How many translations should be returned? Values above 250 are treated as
            /// if 250 was passed.
            /// </param>
            /// <param name='translatedOnly'>
            /// Return only the sentences which have corresponding translations
            /// </param>
            public static QueryTranslationsResult Query(this IDidacticalEnigmaMem operations, string projectName = default(string), string correlationId = default(string), string query = default(string), string category = default(string), string paginationToken = default(string), int? limit = 50, bool? translatedOnly = false)
            {
                return operations.QueryAsync(projectName, correlationId, query, category, paginationToken, limit, translatedOnly).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query for translations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// The name of the project
            /// </param>
            /// <param name='correlationId'>
            /// The prefix of the correlation id
            /// </param>
            /// <param name='query'>
            /// Search query
            /// </param>
            /// <param name='category'>
            /// Translation category
            /// </param>
            /// <param name='paginationToken'>
            /// A pagination token that was returned from the previous query with the same
            /// set of parameters
            /// </param>
            /// <param name='limit'>
            /// How many translations should be returned? Values above 250 are treated as
            /// if 250 was passed.
            /// </param>
            /// <param name='translatedOnly'>
            /// Return only the sentences which have corresponding translations
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryTranslationsResult> QueryAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), string correlationId = default(string), string query = default(string), string category = default(string), string paginationToken = default(string), int? limit = 50, bool? translatedOnly = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryWithHttpMessagesAsync(projectName, correlationId, query, category, paginationToken, limit, translatedOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='correlationId'>
            /// </param>
            public static object DeleteTranslation(this IDidacticalEnigmaMem operations, string projectName = default(string), string correlationId = default(string))
            {
                return operations.DeleteTranslationAsync(projectName, correlationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='correlationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteTranslationAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), string correlationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTranslationWithHttpMessagesAsync(projectName, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='correlationId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UpdateTranslation(this IDidacticalEnigmaMem operations, string projectName = default(string), string correlationId = default(string), UpdateTranslationParams body = default(UpdateTranslationParams))
            {
                return operations.UpdateTranslationAsync(projectName, correlationId, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='projectName'>
            /// </param>
            /// <param name='correlationId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTranslationAsync(this IDidacticalEnigmaMem operations, string projectName = default(string), string correlationId = default(string), UpdateTranslationParams body = default(UpdateTranslationParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTranslationWithHttpMessagesAsync(projectName, correlationId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
